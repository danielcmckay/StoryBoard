{"version":3,"sources":["context/AuthContext.js","context/themeContext.js","Components/Reusable/Spinner.js","Components/Reusable/Button.js","hooks/auth-hook.js","Components/Reusable/ErrorModal.js","Components/Auth/Login.js","Components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","themeContext","Spinner","props","color","size","loading","isLoading","Button","className","classes","onClick","children","logoutTimer","ErrorModal","message","Login","useState","email","value","isValid","password","user","setUser","loginMode","setLoginMode","setLoading","error","setError","onChangeHandler","e","target","name","auth","useContext","onSubmit","a","async","preventDefault","fetch","process","method","headers","body","JSON","stringify","response","json","responseData","ok","Error","console","log","htmlFor","type","placeholder","onChange","Nav","dark","to","useAuth","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","useCallback","uid","expirationDate","Date","getTime","localStorage","setItem","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","window","getItem","StoryBoard","React","lazy","Settings","App","routes","setDark","Provider","path","exact","fallback","style","width","margin","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a22d4df.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const AuthContext = createContext({\n  isLoggedIn: false,\n  userId: null,\n  token: null,\n  login: () => {},\n  logout: () => {}\n});\n","import {createContext} from 'react';\n\n\nconst themeContext = createContext(false);\n\n\nexport default themeContext;","import React from 'react';\nimport {SyncLoader} from 'react-spinners';\n\nconst Spinner = (props) => {\n  ;\n\n  \n  return (\n    <SyncLoader color='#ff5555' size={15} loading={props.isLoading}/>\n  )\n}\n\nexport default Spinner\n","import React from \"react\";\nimport \"./Button.css\";\nimport \"../Auth/Login.css\";\n\nconst Button = props => {\n  return (\n    <button\n      className={`Button ${props.classes}`}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import { useState, useEffect, useCallback } from \"react\";\nlet logoutTimer;\n\n\nconst useAuth = () => {\n  const [token, setToken] = useState(false);\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\n  const [userId, setUserId] = useState(\"5e6017d4a9835a614b38b026\");\n  \n  const login = useCallback((uid, token, expirationDate) => {\n    setToken(token);\n    setUserId(uid);\n    const tokenExpirationDate =\n      expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n    setTokenExpirationDate(tokenExpirationDate);\n    localStorage.setItem(\n      \"userData\",\n      JSON.stringify({\n        userId: uid,\n        token: token,\n        expiration: tokenExpirationDate.toISOString()\n      })\n    );\n  }, []);\n  \n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setTokenExpirationDate(null);\n    localStorage.removeItem(\"userData\");\n  }, []);\n  \n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n  \n  useEffect(() => {\n    const storedData = JSON.parse(window.localStorage.getItem(\"userData\"));\n    if (\n      storedData &&\n      storedData.token &&\n      new Date(storedData.expiration) > new Date()\n    ) {\n      setToken(storedData.token);\n      setUserId(storedData.userId);\n    }\n  }, []);\n\n  return {userId, token, login, logout}\n}\n\n\nexport default useAuth;","import React from 'react';\nimport './ErrorModal.css';\n\nconst ErrorModal = (props) => {\n  return (\n    <div className=\"ErrorModal\">\n      {props.message}\n    </div>\n  )\n}\n\nexport default ErrorModal\n\n","import React, { useContext, useState } from \"react\";\nimport \"./Login.css\";\nimport Button from \"../Reusable/Button\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport Spinner from \"../Reusable/Spinner\";\nimport ErrorModal from '../Reusable/ErrorModal';\n\nconst Login = () => {\n  const [user, setUser] = useState({\n    email: {\n      value: \"\",\n      isValid: false\n    },\n    password: {\n      value: \"\",\n      isValid: false\n    }\n  });\n  const [loginMode, setLoginMode] = useState(true);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(true);\n\n  const onChangeHandler = e => {\n    setUser({ ...user, [e.target.name]: e.target.value });\n  };\n\n  const auth = useContext(AuthContext);\n\n  const loginHandler = async e => {\n    e.preventDefault();\n    setLoading(true);\n\n    if (loginMode) {\n      try {\n        const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/api/users/login', {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            email: user.email,\n            password: user.password\n          })\n        });\n\n        const responseData = await response.json();\n        if (!response.ok) {\n          setLoading(false);\n\n          throw new Error(responseData.message)\n        }\n        setLoading(false);\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {\n        setError(err.message || \"Something went wrong!\");\n      }\n    } else {\n      try {\n        const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/api/users/signup', {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            email: user.email,\n            password: user.password\n          })\n        });\n\n        const responseData = await response.json();\n        if (!response.ok) {\n          setLoading(false);\n\n          throw new Error(responseData.message)\n        }\n        setLoading(false);\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {\n        setError(err.message || \"Something went wrong!\");\n        console.log(err)\n      }\n    }\n  };\n\n  const loginModeHandler = () => {\n    setLoginMode(!loginMode);\n  };\n\n\n  return (\n    <div className=\"Login\">\n      {isLoading ? (\n        <Spinner loading={true}></Spinner>\n      ) : (\n        <>\n          <span className=\"Title\">\n            <h1>StoryBoard</h1>\n            <span className=\"title-decoration-wrapper\">\n              <div className=\"title-decoration\"></div>\n              <div className=\"title-decoration\"></div>\n              <div className=\"title-decoration\"></div>\n            </span>\n          </span>\n          <p>Because keeping track of ideas should be easy.</p>\n          <form onSubmit={loginHandler}>\n            <span>\n              <label htmlFor=\"email\">Email</label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"jdoe@gmail.com\"\n                onChange={onChangeHandler}\n              ></input>\n            </span>\n            <span>\n              <label htmlFor=\"password\">Password</label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"password\"\n                onChange={onChangeHandler}\n              ></input>\n            </span>\n            <Button type=\"submit\">{loginMode ? \"Login\" : \"Sign up\"}</Button>{\" \"}\n          </form>\n          <Button\n            type=\"button\"\n            classes=\"LoginBtn LoginBtnAlt\"\n            onClick={loginModeHandler}\n          >\n            {loginMode ? \"Not a user? Sign up!\" : \"Already a user? Login\"}\n          </Button>\n          {error && <ErrorModal message={error} />}\n\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Login;\n","import React, {useContext} from \"react\";\nimport \"./Nav.css\";\nimport {NavLink} from 'react-router-dom';\nimport themeContext from '../../context/themeContext';\nimport {AuthContext} from '../../context/AuthContext';\n\nconst Nav = () => {\n  const {dark} = useContext(themeContext);\n  const {logout} = useContext(AuthContext)\n\n  const logoutHandler = e => {\n    logout();\n  }\n\n  return (\n    <nav className={!dark ? \"Nav\" : \"Nav Nav-dark\"}>\n      <span className=\"TitleSpan\">\n        <NavLink to='/'><h1>StoryBoard</h1></NavLink>\n        \n        <span className=\"title-decoration-wrapper\">\n          <div className=\"title-decoration\"></div>\n          <div className=\"title-decoration\"></div>\n          <div className=\"title-decoration\"></div>\n        </span>\n      </span>\n      <ul className=\"NavList\">\n        <li className=\"NavItem\"><NavLink to=\"/settings\">Settings</NavLink></li>\n        <li className=\"NavItem\" onClick={logoutHandler}>Logout</li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React, { useState, useEffect, Suspense } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./Components/Auth/Login\";\nimport Nav from \"./Components/Nav/Nav\";\nimport themeContext from \"./context/themeContext\";\nimport { AuthContext } from \"./context/AuthContext\";\nimport useAuth from \"./hooks/auth-hook\";\nimport Spinner from \"./Components/Reusable/Spinner\";\n\nconst StoryBoard = React.lazy(() =>\n  import(\"./Components/StoryBoard/StoryBoard\")\n);\nconst Settings = React.lazy(() => import(\"./Components/Settings/Settings\"));\n\nconst App = () => {\n  const { userId, token, login, logout } = useAuth();\n  const [dark, setDark] = useState();\n\n  useEffect(() => {\n    if (!window.localStorage.getItem(\"darkTheme\")) {\n      window.localStorage.setItem(\"darkTheme\", \"false\");\n    } else {\n      window.localStorage.getItem(\"darkTheme\") === \"true\" && setDark(true);\n    }\n  }, []);\n\n  let routes;\n\n  if (token) {\n    routes = (\n      <themeContext.Provider value={{ dark, setDark }}>\n        <Nav />\n        <Route path=\"/\" exact>\n          <StoryBoard />\n        </Route>\n        <Route path=\"/settings\" exact>\n          <Settings />\n        </Route>\n\n        <Redirect to=\"/\" />\n      </themeContext.Provider>\n    );\n  } else {\n    routes = (\n      <Route path=\"/\" exact>\n        <Login />\n      </Route>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <AuthContext.Provider\n        value={{\n          isLoggedIn: !!token,\n          token: token,\n          login: login,\n          logout: logout,\n          userId: userId\n        }}\n      >\n        <Router>\n          <Switch>\n            <Suspense\n              fallback={\n                <div style={{ width: \"150px\", margin: \"auto\" }}>\n                  <Spinner />\n                </div>\n              }\n            >\n              {routes}\n            </Suspense>\n          </Switch>\n        </Router>\n      </AuthContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}